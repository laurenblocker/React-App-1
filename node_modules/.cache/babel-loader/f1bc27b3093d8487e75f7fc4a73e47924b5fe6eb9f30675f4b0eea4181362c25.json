{"ast":null,"code":"var _jsxFileName = \"/Users/laurenblocker/Desktop/Spring 2025/DIG 4639/react-application/src/components/Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar(_ref) {\n  _s();\n  let {\n    initialMenuItems\n  } = _ref;\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  // TODO: 2 - Using a state hook, maintain the current menu items as an array state.\n  let [menuItems, setMenuItems] = useState(initialMenuItems); // State to track menu items\n  let [filter, setFilter] = useState(\"\");\n\n  // Adds a single string passed in as parameter to the state element \"menuItems\"\n  let addMenuItem = useCallback(() => {\n    if (newMenuItem.trim()) {\n      // Only add if there's something in the input\n      setMenuItems([newMenuItem, ...menuItems]);\n      setNewMenuItem(\"\"); // Clear input after adding\n    }\n  }, [newMenuItem, menuItems]);\n\n  // Filter menu items based on filter input\n  let filteredMenuItems = menuItems.filter(item => item.toLowerCase().includes(filter.toLowerCase()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredMenuItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMenuItem,\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","Sidebar","initialMenuItems","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","trim","filteredMenuItems","item","toLowerCase","includes","map","index","event","target","value"],"sources":["/Users/laurenblocker/Desktop/Spring 2025/DIG 4639/react-application/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\n\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nexport default function Sidebar({ initialMenuItems }) {\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  // TODO: 2 - Using a state hook, maintain the current menu items as an array state.\n  let [menuItems, setMenuItems] = useState(initialMenuItems); // State to track menu items\n  let [filter, setFilter] = useState(\"\");\n  \n  // Adds a single string passed in as parameter to the state element \"menuItems\"\n  let addMenuItem = useCallback(() => {\n    if (newMenuItem.trim()) { // Only add if there's something in the input\n      setMenuItems([newMenuItem, ...menuItems]);\n      setNewMenuItem(\"\"); // Clear input after adding\n    }\n  }, [newMenuItem, menuItems]);\n\n  // Filter menu items based on filter input\n  let filteredMenuItems = menuItems.filter(item => \n    item.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <div>\n      <ul>\n        {filteredMenuItems.map((item, index) => (\n          <li key={index}>{item}</li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        id=\"newMenuItemValue\"\n        value={newMenuItem}\n        onChange={(event) => setNewMenuItem(event.target.value)}\n      />\n      <br />\n      <button onClick={addMenuItem}>Add Item</button>\n      <br />\n      <input\n        id=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={(event) => setFilter(event.target.value)}\n        placeholder=\"Filter by...\"\n      />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAE7C;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,OAAO,OAAuB;EAAA;EAAA,IAAtB;IAAEC;EAAiB,CAAC;EAClD,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,IAAI,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACG,gBAAgB,CAAC,CAAC,CAAC;EAC5D,IAAI,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,IAAIU,WAAW,GAAGT,WAAW,CAAC,MAAM;IAClC,IAAIG,WAAW,CAACO,IAAI,EAAE,EAAE;MAAE;MACxBJ,YAAY,CAAC,CAACH,WAAW,EAAE,GAAGE,SAAS,CAAC,CAAC;MACzCD,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACD,WAAW,EAAEE,SAAS,CAAC,CAAC;;EAE5B;EACA,IAAIM,iBAAiB,GAAGN,SAAS,CAACE,MAAM,CAACK,IAAI,IAC3CA,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACP,MAAM,CAACM,WAAW,EAAE,CAAC,CAClD;EAED,oBACE;IAAA,wBACE;MAAA,UACGF,iBAAiB,CAACI,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBACjC;QAAA,UAAiBJ;MAAI,GAAZI,KAAK;QAAA;QAAA;QAAA;MAAA,QACf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eACL;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEb,WAAY;MACnB,QAAQ,EAAGc,KAAK,IAAKb,cAAc,CAACa,KAAK,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACxD,eACF;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAQ,OAAO,EAAEV,WAAY;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAS,eAC/C;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEF,MAAO;MACd,QAAQ,EAAGU,KAAK,IAAKT,SAAS,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QAC1B;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEV;AAAC,GA5CuBlB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}